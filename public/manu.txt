PRINTCODE - Imprimir el código
Desde el archivo que quiero imprimir:
Botón derecho / Command Palette / Pulsar PrintCode

GUIA DE INSTALACIÓN DE HERRAMIENTAS

- Limpiar el css de index.css y App.css
- En index.html cambiar el título por el nombre del proyecto.

- App.js - Eliminar el import del logo de React y limpiar la función App.
import "./App.css";
function App() {
  return "hola";
}
export default App;

- Carpeta src - Eliminar el logo.svg de React.
- Carpeta public - Sustituir favicon.ico, logo192.png y logo512.png de React por los del proyecto.
Crear favicon.ico en     https://www.ionos.es/tools/crear-favicon
Mantener los mismos nombres en las tres imágenes nuevas para no romper el archivo manifest.json

IMPORTANTE. Añadir el proxi en el archivo package.json para que funcione el CRUD. (Ver package.json con el proxi incluído.)
"proxy": "http://localhost:3000"



GOOGLE FONTS - Roboto

https://fonts.google.com/specimen/Roboto
Descargar tipografía seleccionada + la alternativa que propone Google Fonts al final de la página de la tipografía, (en el caso de Roboto es Open sans). Selección mínima: Sans Serif, grosor normal. Tamaño mínimo en pantalla 14px.
1- Descargar el enlace y pegarlo en public/index.html en el head.
<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Open+Sans&family=Roboto&display=swap" rel="stylesheet">
2- Copiar los font.family CSS y pegarlos en la etiqueta body de index.css


FONTAWESOME

https://fontawesome.com
Copiar este código en public/index.html/head, (es el que corresponde a mi cuenta):
<script src="https://kit.fontawesome.com/4ff9607121.js" crossorigin="anonymous"></script>

- Iconos. Seleccionar icono, copiar html e insertar el código en el componente.
OJO! Hay que cambiar el atributo class que viene por defecto por className de React.
Ej. <i class="fas fa-chevron-circle-down"></i>   por    <i className="fas fa-chevron-circle-down"></i>

===============================================================================================================

RUTAS

Instalar reac-router-dom en el terminal  --   npm i react-router-dom

//Importamos BrowserRouter y Route desde react-router-dom
//BrouserRouter es como un div que envuelve todos los componentes y dentro de él van las rutas y los componentes

//En este ejemplo creamos el componente saludo, lo importamos y lo renderizamos dentro de BrowserRoute

//Componente saludo:

const Saludo = () => {
  return <h1>Hola</h1>;
};
export default Saludo;
......................................

Y lo renderizo. (Se verá directamente en la pantalla)

// import "./App.css";
// import Saludo from "./Saludo";

// import { BrowserRouter, Route } from "react-router-dom";

// function App() {
//   return (
//     <BrowserRouter>
//       <Saludo />
//     </BrowserRouter>
//   );
// }

// export default App;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//PERO CÓMO HAGO, si no quiero mostrar el componente hasta que lo llame y acceda  a una ruta en concreto? (Para simular una web que tiene distintos enlaces a distintas páginas)
//Entonces debería crear un componente con enlaces y aquí debería crear la ruta y usar Link.
//Link "simula" que la web está cargando un archivo html, cuando en realidad lo que está cargando es el JSX en la única página que usa React.

//Componente Enlaces:

import { Link } from "react-router-dom";

const Enlaces = () => {
  return <Link to="/saludo">SALUDAR</Link>;
};
export default Enlaces;
...........................................

//Así, el flujo sería:
// 1 - Creo el componente Saludo y lo importo a App.js
// 2 - Creo el componente Enlaces y lo importo a App.js
// 3 - En App.js dentro del return meto el BrowserRoute con el componente Enlaces y las rutas dentro de Route

// import "./App.css";
// import Saludo from "./Saludo";
// import Enlaces from "./Enlaces";

// import { BrowserRouter, Route } from "react-router-dom";

// function App() {
//   return (
//     <BrowserRouter>
//       <Enlaces />
//       <Route exact path="/saludo">
//         <Saludo />
//       </Route>
//     </BrowserRouter>
//   );
// }

// export default App;

OJO!!! MUCHO CUIDADO AL ESCRIBIR LAS RUTAS.
EN EL PROYECTO, LAS RUTAS QUE TENEMOS EN MenuNav.js empiezan con ./  pero cuando escribimos las rutas en App.js EMPIEZAN CON /   Ejemplo:  <Route exact path="/Histoire.js">

MUY IMPORTANTE. Todo el código de las rutas en App.js tiene que quedar dentro de las mismas etiquetas <BrowserRouter></BrowserRouter>

NOTA. Se puden eliminar los .js finales de las rutas de los links para que no aparezca .js en la barra de navegación.
Si los eliminamos, también tendremos que quitarlos de las rutas dentro de las etiquetas Route dentro de App.js    (En este proyecto las he elimnado).

===============================================================================================================

BOOTSTRAP

getbootstrap.com
Para trabajar con el Grid hay que copiar el enlace CSS
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
y pegarlo en public/index.html en el head.
Con esto podremos usar el html y el css de bootstrap además del grid

Para usar los componentes de bootstrap en React con el js que tienen por detrás hay que descargar el paquete de   https://react-bootstrap.github.io
e instalar a través del terminal      npm install react-bootstrap bootstrap
E ir descargando individualmente cada componente que queramos utilizar.
Encontraremos el código para importar cada componente al final de su documentación, en  API "componente que sea", p.ej:    import Button from 'react-bootstrap/Button'    y después copiamos el código del elemento o elementos concretos que queramos usar.


IMÁGENES

Respetar la configuración de la carpeta public sustituyendo las de React por las mías para el favicon y los logos.

Las imágenes podemois guardarlas en un servicio de almacenamiento online como google fotos y escribir solamente el enlace en la base de datos o el lugar del código donde queremos que aparezca la imagen.

Dentro de la carpeta src creo la carpeta  uploads  para guardar todas las imágenes del proyecto.
Para renderizar las imágenes tengo que importar importarlas primero y después indicar la ruta dentro de ña etiqueta img. Ejemplo:
import collage2 from "./uploads/Kalypse-ALPHA-Citrus-381pvarr72x24sbru4uu4g.jpg";
Y dentro del componente:
return <img src={collage2} alt="" />;


VIDEO RESPONSIVE

Opciones Youtube no incluídas en el código del iframe:
- Autoplay en la inserción del video: Simplemente sumándole al código el “autoplay=1”
- Si quieres que se inicie en un momento distinto al de inicio inserta “start=100” (el tiempo en segundos)
- Puedes hacer que desaparezcan los controles de la parte de abajo con el código “controls=1”
- Para evitar los molestos videos relacionados al final del video debes de poner “rel=0”
- Para evitar que aparezca la información del video en la parte superior del reproductor “showinfo=0”


GOOGLE MAPS

Coordenadas.
Buscar la empresa en google maps y hacer click derecho en el icono que señaliza el sitio para ver las coordenadas. OJO, estas pueden variar ligeramente en función del sitio exacto donde pongamos el ratón cuando las sacamos. 
Conviene hacerlo un poquito más arriba de la punta del icono para que el icono rojo que las muestra no tape el icono verde que marca la empresa cuando hacemos zoom.

Coordenadas de CID:       28.92106576250419, -13.644772672933705

1 - Instalo el paquete en el terminal    npm i react-google-maps

SEGURIDAD.
TODAS LAS CLAVES DEBEN GUARDARSE EN UNA CARPETA QUE NO PUBLICAREMOS EN GITHUB.
(Por seguridad la clave api está en las notas adhesivas del mac)

2 - Saco el código de la documentación de React Google Maps:
https://tomchentw.github.io/react-google-maps/#installation

Para renderizar el mapa básico, que es el que uso en esta aplicación tendré que usar el código con recompose que se ve en el paso 4 de la documentación.
Este código básicamente es una función que recibe por props de la API los datos que se necesitan para poder renderizar el mapa:

import { compose, withProps } from "recompose"
import { withScriptjs, withGoogleMap, GoogleMap, Marker } from "react-google-maps"

const MyMapComponent = compose(
  withProps({
    googleMapURL: "https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places",
    loadingElement: <div style={{ height: `100%` }} />,
    containerElement: <div style={{ height: `400px` }} />,
    mapElement: <div style={{ height: `100%` }} />,
  }),
  withScriptjs,
  withGoogleMap
)((props) =>
  <GoogleMap
    defaultZoom={8}
    defaultCenter={{ lat: -34.397, lng: 150.644 }}
  >
    {props.isMarkerShown && <Marker position={{ lat: -34.397, lng: 150.644 }} />}
  </GoogleMap>
))

<MyMapComponent isMarkerShown />

Teniendo en cuenta que:
1 - la última línea del código
<MyMapComponent isMarkerShown />
corresponde a App.js

2 - Que tendremos que importar la clave de la key del archivo myKeys, e insertarlo en la url de googleMapURL

3 - Y que tenemos que insertar las coordenadas de nuestro negocio en el componente GoogleMap. (También podemos modificar el nivel de zoom del mapa en defaultZoom)


SEGURIDAD: IGNORAR ARCHIVOS - .gitignore

Aparte de /node_modules y archivos que por defecto React incluye en .gitignore, incluiré todo lo que como programador no quiero que se haga público cuando suba la aplicación a github.

Por el momento se me ocurren este mismo archivo:  /public/manu.txt
El archivo donde guardo mis snippets de código:  /public/snippets.txt
Y MUY IMPORTANTE, los archivos de contraseñas.

Por el momento tengo el archivo:  /src/components/landing/myKeys.js
El contenido de este archivo NO ES UNA FUNCIÓN, sólo un export default con un objeto donde guardo mis contraseñas:

export default {
  mapsKey: "AIzaXXXXXXXXXXXXXXXXXXXXXXXXX",          //(La clave api está en las notas adhesivas del mac)
};

Después importaré myKeys donde lo necesite, conmo es el caso del componente MyMapComponent.js e insertaré el objeto con la key donde lo necesite.
Como he hecho en la línea donde tengo que pasar el googleMapURL.

NOTA. Cuando metemos un archivo en .gitignore veremos que en la barra EXPLORER de la izquierda el color del nombre cambia a un tono más apagado. Así es como github avisa de que no lo subirá al repositorio.

Más info en este tutorial:   https://www.youtube.com/watch?v=PuwGdowtm5s


REDIRECT
En el formulario de usuario y contraseña quiero establecer una condición para entrar o no en el panel de control en función de que los datos sean correctos.
Si son correctos me envíe al panel de control y si no lo son me salte un alert avisando de que están mal.
Ander me ha pasado este ejemplo básico con Redirect to para poder usarlo en el archivo ComprobarUser.js


const [variable, setVariable] = useState(null)
​
function ir(){
	if(variable === null (o la condición que necesites){
	   	setVariable(true)
	   }else{
		   setVariable(false)
	   }
}
​
if(variable){
	return <Redirect to="/la ruta si es true" />
}else if(variable === false){
	return <Redirect to="la ruta si es false" />
}else {
	return (
		<div>
		
		<button>Envíar</button>
		</div>
	)
}

PANEL DE CONTROL - RENDERIZAR/REFRESCAR EL NAVEGADOR AUTOMÁTICAMENTE AL ELIMINAR O MODIFICAR UN PRODUCTO

 RENDERIZAR automáticamente la web para que desaparezca el producto al hacer click.
 Recibo por props la función handleBoolean de ReadProducto.js  en el archivo MostrarProducto.js para renderizar/refrescar el navegador automáticamente cuando se haga un Delete
 También la recibo por props en Delete.js

 Así que tenemos todo en:
  ReadProducto.js
  MostrarProducto.js
  Delete.js













